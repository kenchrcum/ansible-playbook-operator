# Executor ServiceAccount Configuration Examples
# This file demonstrates executor ServiceAccount configuration options

# =============================================================================
# DEFAULT CONFIGURATION (Recommended)
# =============================================================================
# Creates a separate ServiceAccount for executor Jobs with minimal permissions

executorDefaults:
  serviceAccount:
    create: true
    # Name will be auto-generated as {release-name}-ansible-playbook-operator-executor
    name: ""
    rbacPreset: minimal

# Generated Resources:
# - ServiceAccount: {release-name}-ansible-playbook-operator-executor
# - Role: minimal permissions (read pods, services, configmaps, secrets; create events)
# - RoleBinding: binds executor ServiceAccount to Role
#
# Security Level: HIGH
# Use Cases: Production deployments, security-conscious environments
# Benefits: Separate identity for executor pods, minimal permissions, audit trail

# =============================================================================
# CUSTOM EXECUTOR SERVICEACCOUNT NAME
# =============================================================================
# Use a custom name for the executor ServiceAccount

# executorDefaults:
#   serviceAccount:
#     create: true
#     name: "my-custom-executor-sa"
#     rbacPreset: minimal

# =============================================================================
# EXTENDED PERMISSIONS FOR CROSS-NAMESPACE OPERATIONS
# =============================================================================
# Use this when Ansible playbooks need to manage resources across namespaces

# executorDefaults:
#   serviceAccount:
#     create: true
#     name: ""
#     rbacPreset: scoped

# Generated Permissions (scoped preset):
# - Extended read/write access to deployments, replicasets, statefulsets, daemonsets
# - Cross-namespace resource management capabilities
# - Network policies and ingress management
# - Pod disruption budget management
#
# Security Level: MEDIUM
# Use Cases: Multi-namespace deployments, infrastructure automation
# Benefits: Enables complex Ansible playbooks with cross-namespace operations

# =============================================================================
# CLUSTER-ADMIN PERMISSIONS (Use with Extreme Caution)
# =============================================================================
# Only use this for playbooks requiring full cluster access

# executorDefaults:
#   serviceAccount:
#     create: true
#     name: ""
#     rbacPreset: cluster-admin

# Generated Permissions (cluster-admin preset):
# - Full cluster permissions within namespace
# - Wildcard access to all API groups, resources, and verbs
#
# Security Level: LOW
# Use Cases: Cluster-wide infrastructure management, emergency operations
# Risks: High privilege escalation risk, potential for accidental damage
# Recommendations: Use only when absolutely necessary, implement additional monitoring

# =============================================================================
# DISABLE EXECUTOR SERVICEACCOUNT
# =============================================================================
# Use the operator's ServiceAccount for executor Jobs (legacy behavior)

# executorDefaults:
#   serviceAccount:
#     create: false

# Note: When disabled, executor Jobs will use the operator's ServiceAccount
# This reduces security isolation but may be necessary for compatibility
