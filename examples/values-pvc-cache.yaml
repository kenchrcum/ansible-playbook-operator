# PVC Cache Configuration Examples
# This file demonstrates how to configure PVC-backed caching for Ansible collections and roles

# =============================================================================
# EXAMPLE 1: ENABLE PVC CACHE WITH DEFAULT SETTINGS
# =============================================================================
# Creates a PVC for caching Ansible collections and roles

executorDefaults:
  cache:
    # Enable PVC-based caching
    strategy: pvc
    # PVC name will be auto-generated as {release-name}-ansible-cache
    pvcName: ""
    # Create a new PVC for caching
    createPVC: true
    # Storage size for the cache
    storageSize: "10Gi"
    # Use default storage class
    storageClassName: ""

# Generated Resources:
# - PVC: {release-name}-ansible-cache (10Gi, default storage class)
# - Mount: /workspace/.ansible on executor pods
#
# Benefits:
# - Faster playbook execution (collections cached between runs)
# - Reduced network usage (collections downloaded once)
# - Improved reliability (offline collection access)
#
# Use Cases: Production environments, frequently executed playbooks

# =============================================================================
# EXAMPLE 2: CUSTOM PVC NAME AND STORAGE CLASS
# =============================================================================
# Use existing PVC or custom storage configuration

# executorDefaults:
#   cache:
#     strategy: pvc
#     # Use existing PVC
#     pvcName: "my-existing-ansible-cache"
#     # Don't create new PVC
#     createPVC: false
#     # These settings are ignored when createPVC is false
#     storageSize: "50Gi"
#     storageClassName: "fast-ssd"

# =============================================================================
# EXAMPLE 3: PRODUCTION-READY PVC CACHE
# =============================================================================
# Optimized for production workloads with high-performance storage

executorDefaults:
  cache:
    strategy: pvc
    pvcName: "ansible-cache-prod"
    createPVC: true
    # Larger cache for extensive collections
    storageSize: "50Gi"
    # High-performance storage class
    storageClassName: "fast-ssd"

# Additional Production Considerations:
# - Enable PVC backup/restore procedures
# - Monitor PVC usage and resize as needed
# - Consider PVC replication for high availability
# - Implement PVC cleanup policies for unused collections

# =============================================================================
# EXAMPLE 4: MULTI-NAMESPACE CACHE SHARING
# =============================================================================
# Share cache across multiple operator instances

# executorDefaults:
#   cache:
#     strategy: pvc
#     # Shared PVC name across namespaces
#     pvcName: "shared-ansible-cache"
#     # Don't create PVC (assume it exists)
#     createPVC: false
#     storageSize: "100Gi"
#     storageClassName: "shared-storage"

# Note: Requires manual PVC creation and proper RBAC for cross-namespace access

# =============================================================================
# EXAMPLE 5: DISABLE CACHING (DEFAULT)
# =============================================================================
# No caching - collections downloaded on every execution

# executorDefaults:
#   cache:
#     strategy: none
#     pvcName: ""
#     createPVC: false
#     storageSize: "10Gi"
#     storageClassName: ""

# Use Cases: Development, testing, or when storage is limited

# =============================================================================
# OPERATIONAL CONSIDERATIONS
# =============================================================================

# 1. Storage Requirements
#    - Estimate cache size based on collection usage
#    - Monitor PVC usage and resize as needed
#    - Consider storage class performance characteristics

# 2. Cache Management
#    - Collections are cached automatically on first download
#    - Cache persists across pod restarts and updates
#    - Manual cache cleanup may be needed for unused collections

# 3. Backup and Recovery
#    - Include PVC in backup procedures
#    - Test cache restoration procedures
#    - Consider cache replication for high availability

# 4. Security Considerations
#    - Ensure PVC has appropriate access controls
#    - Consider encryption at rest for sensitive collections
#    - Monitor cache access patterns

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Common Issues:

# 1. PVC creation fails
#    - Check storage class availability
#    - Verify namespace storage quotas
#    - Check PVC naming conflicts

# 2. Cache not working
#    - Verify PVC is bound and accessible
#    - Check executor pod logs for mount errors
#    - Verify cache strategy is set to 'pvc'

# 3. Performance issues
#    - Consider faster storage class
#    - Monitor PVC I/O performance
#    - Check cache hit/miss ratios

# Debug Commands:
# kubectl get pvc -l app.kubernetes.io/name=ansible-playbook-operator
# kubectl describe pvc {pvc-name}
# kubectl logs -l app.kubernetes.io/name=ansible-playbook-operator-executor

# =============================================================================
# BEST PRACTICES
# =============================================================================

# 1. Sizing Guidelines
#    - Start with 10Gi for basic collections
#    - Scale up based on collection usage patterns
#    - Monitor growth and plan for expansion

# 2. Storage Class Selection
#    - Use SSD storage for better performance
#    - Consider replication for high availability
#    - Balance cost vs performance requirements

# 3. Cache Strategy
#    - Enable caching for production workloads
#    - Disable for development/testing environments
#    - Consider shared caches for multi-tenant deployments

# 4. Monitoring
#    - Monitor PVC usage and performance
#    - Set up alerts for storage quota violations
#    - Track cache effectiveness metrics

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Deploy with PVC cache:
# helm install ansible-operator ./helm/ansible-playbook-operator \
#   --values examples/values-pvc-cache.yaml \
#   --namespace ansible-operator-system \
#   --create-namespace

# Check PVC status:
# kubectl get pvc -n ansible-operator-system

# Monitor cache usage:
# kubectl exec -it deployment/ansible-operator -n ansible-operator-system -- df -h /workspace/.ansible
