# Example values for namespace-scoped watch mode
# This configuration limits the operator to watching resources in a single namespace
# Suitable for single-tenant deployments or isolated environments

operator:
  image:
    repository: kenchrcum/ansible-playbook-operator
    tag: "0.1.1"
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  leaderElection: true
  watch:
    # Namespace-scoped watch: operator only watches resources in its own namespace
    scope: namespace
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  serviceAccount:
    create: true
    name: ""

executorDefaults:
  image:
    repository: kenchrcum/ansible-runner
    tag: 13
    pullPolicy: IfNotPresent
  cache:
    strategy: none
    createPVC: false

rbac:
  # Minimal preset: least-privilege permissions for single-namespace operation
  # This is the most secure option for namespace-scoped deployments
  preset: minimal

  # Enable cluster read permissions for Kopf preflight checks (CRDs, namespaces)
  # Required for the operator to function properly
  clusterRead: true

# RBAC Trade-offs for Namespace Watch Mode:
#
# Advantages:
# - Maximum security isolation: operator can only access resources in its namespace
# - Least privilege: minimal permissions reduce attack surface
# - Clear boundaries: easy to understand and audit permissions
# - Suitable for multi-tenant environments where each tenant gets their own operator
#
# Limitations:
# - Single namespace only: cannot manage resources across other namespaces
# - Resource duplication: each namespace needs its own operator deployment
# - Limited cross-namespace visibility: cannot reference resources in other namespaces
# - Higher operational overhead: multiple operator instances to manage
#
# Use Cases:
# - Single-tenant deployments
# - Development/testing environments
# - Multi-tenant SaaS where each tenant is isolated
# - Environments with strict security requirements
#
# RBAC Permissions Granted:
# - Namespace: read access to events, pods, secrets (for auth), jobs, cronjobs
# - Cluster: read access to CRDs and namespaces (for Kopf preflight)
# - CRDs: full access to ansible.cloud37.dev resources in the namespace
#
# Security Considerations:
# - Operator cannot access resources outside its namespace
# - Secrets are limited to the namespace (good for isolation)
# - No cluster-wide write permissions
# - Suitable for environments with strict network policies
