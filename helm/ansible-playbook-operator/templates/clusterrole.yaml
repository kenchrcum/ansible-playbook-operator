{{- if eq .Values.rbac.preset "cluster-admin" }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "ansible-playbook-operator.fullname" . }}
  labels:
    app.kubernetes.io/name: ansible-playbook-operator
    app.kubernetes.io/instance: {{ .Release.Name }}
rules:
  # Cluster-admin preset: full cluster permissions
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
{{- else if eq .Values.rbac.preset "scoped" }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "ansible-playbook-operator.fullname" . }}-scoped
  labels:
    app.kubernetes.io/name: ansible-playbook-operator
    app.kubernetes.io/instance: {{ .Release.Name }}
rules:
  # Scoped preset: cross-namespace access for CRDs and namespaces
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["namespaces", "secrets", "configmaps"]
    verbs: ["get", "list", "watch"]
{{- if and .Values.rbac.secretRestriction.enabled .Values.rbac.secretRestriction.crossNamespaceSecrets }}
    # Cross-namespace Secret access is handled via separate RoleBindings per namespace
    # See executor-rolebinding.yaml for implementation
{{- end }}
  - apiGroups: ["ansible.cloud37.dev"]
    resources: ["repositories", "playbooks", "schedules"]
    verbs: ["get", "list", "watch"]
{{- else if .Values.rbac.clusterRead }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "ansible-playbook-operator.fullname" . }}-read
  labels:
    app.kubernetes.io/name: ansible-playbook-operator
    app.kubernetes.io/instance: {{ .Release.Name }}
rules:
  # Minimal preset: basic cluster read permissions for Kopf preflight
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
{{- end }}
