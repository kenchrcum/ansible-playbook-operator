# =============================================================================
# OPERATOR CONFIGURATION
# =============================================================================
# Configuration for the Ansible Playbook Operator deployment
operator:
  # Operator container image configuration
  image:
    repository: kenchrcum/ansible-playbook-operator
    tag: "0.1.0"
    # Optional: pin image by digest for enhanced security and reproducibility
    # When digest is provided, it takes precedence over tag
    # Format: sha256:abc123def456...
    # See examples/values-image-pinning.yaml for production examples
    digest: ""
    pullPolicy: IfNotPresent

  # Resource requests and limits for the operator pod
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

  # Enable leader election for high availability deployments
  leaderElection: true

  # Watch scope configuration
  watch:
    # Watch scope: 'namespace' (default) or 'all' (cluster-wide)
    # - namespace: Operator watches resources only in its own namespace
    # - all: Operator watches resources across all namespaces
    # See examples/values-cluster-watch.yaml for cluster-wide configuration
    scope: namespace

  # Metrics and monitoring configuration
  metrics:
    # Enable Prometheus metrics endpoint
    enabled: false
    serviceMonitor:
      # Create ServiceMonitor resource for Prometheus Operator
      enabled: true

  # ServiceAccount configuration for the operator
  serviceAccount:
    # Create a dedicated ServiceAccount for the operator
    create: true
    # Custom ServiceAccount name (auto-generated if empty)
    name: ""

# =============================================================================
# EXECUTOR DEFAULTS CONFIGURATION
# =============================================================================
# Default configuration for Ansible executor Jobs created by the operator
executorDefaults:
  # Default executor container image configuration
  image:
    repository: kenchrcum/ansible-runner
    tag: 13
    # Optional: pin image by digest for enhanced security and reproducibility
    # When digest is provided, it takes precedence over tag
    # Format: sha256:abc123def456...
    # See examples/values-image-pinning.yaml for production examples
    digest: ""
    pullPolicy: IfNotPresent

  # ServiceAccount configuration for executor Jobs
  serviceAccount:
    # Whether to create a separate ServiceAccount for executor Jobs
    # Recommended: true (provides security isolation)
    create: true
    # Name of the executor ServiceAccount (auto-generated if empty)
    name: ""
    # RBAC preset for executor permissions
    # See examples/values-executor-serviceaccount.yaml for detailed examples
    rbacPreset: minimal  # Options: minimal, scoped, cluster-admin

  # Cache configuration for Ansible collections and roles
  cache:
    # Default cache strategy for repositories that don't specify one
    # Options: none, pvc
    # See examples/repository-pvc-cache.yaml for usage examples
    strategy: none
    # Default PVC name when strategy is pvc
    pvcName: ""
    # Whether to create a PVC for caching (optional)
    createPVC: false
    # Storage size for the cache PVC when createPVC is true
    storageSize: "10Gi"
    # Storage class name for the cache PVC (optional)
    storageClassName: ""

# =============================================================================
# RBAC CONFIGURATION
# =============================================================================
# Role-Based Access Control configuration for the operator
# See examples/values-rbac-presets.yaml for comprehensive examples
rbac:
  # RBAC permission preset
  # See examples/values-rbac-presets.yaml for detailed explanations
  preset: minimal  # Options: minimal, scoped, cluster-admin

  # Enable cluster read permissions for Kopf preflight checks (CRDs, namespaces)
  # Only applies when preset is 'minimal'; ignored for other presets
  clusterRead: true

  # Secret access restriction (optional)
  # When enabled, restricts Secret access to only explicitly referenced names
  # This provides enhanced security but requires operational overhead to maintain
  # See examples/values-secret-restriction.yaml for configuration examples
  secretRestriction:
    # Enable Secret access restriction using resourceNames
    enabled: false
    # List of Secret names the operator is allowed to access
    # When empty, operator can access all Secrets in namespace (default behavior)
    # When populated, operator can only access Secrets listed here
    # Note: This requires manual maintenance when new Secrets are referenced
    allowedSecrets: []
    # Cross-namespace Secret access (only applies when preset is 'scoped' or 'cluster-admin')
    # Maps namespace -> list of allowed Secret names
    crossNamespaceSecrets: {}

# =============================================================================
# NETWORKPOLICY CONFIGURATION
# =============================================================================
# NetworkPolicy configuration for enhanced security
# Controls egress traffic from operator and executor pods
# See examples/values-networkpolicies.yaml for comprehensive configuration examples
networkPolicies:
  # Enable NetworkPolicy creation (requires CNI with NetworkPolicy support)
  enabled: false

  # NetworkPolicy preset: none, restrictive, moderate, permissive
  # none: No NetworkPolicies created (default)
  # restrictive: Only allow egress to Git endpoints and container registries
  # moderate: Allow DNS, Git endpoints, registries, and Kubernetes API
  # permissive: Allow all egress (not recommended for production)
  preset: none

  # Git endpoints configuration
  git:
    # List of Git hostnames/IPs to allow egress to
    # Common Git providers are pre-configured but can be customized
    endpoints:
      - github.com
      - gitlab.com
      - bitbucket.org
      - gitea.com
      - gitee.com
    # Custom Git endpoints (additional to the defaults above)
    custom: []
    # Ports to allow for Git traffic (default: 22 for SSH, 443 for HTTPS)
    ports:
      - port: 22
        protocol: TCP
      - port: 443
        protocol: TCP
      - port: 80
        protocol: TCP

  # Container registry endpoints configuration
  registries:
    # List of registry hostnames/IPs to allow egress to
    # Common registries are pre-configured but can be customized
    endpoints:
      - docker.io
      - registry-1.docker.io
      - gcr.io
      - k8s.gcr.io
      - quay.io
      - registry.k8s.io
      - ghcr.io
    # Custom registry endpoints (additional to the defaults above)
    custom: []
    # Ports to allow for registry traffic (default: 443 for HTTPS)
    ports:
      - port: 443
        protocol: TCP
      - port: 80
        protocol: TCP

  # DNS configuration
  dns:
    # Allow DNS resolution (required for most operations)
    enabled: true
    # DNS server endpoints (usually cluster DNS)
    endpoints:
      - 10.96.0.10  # kube-dns default
      - 169.254.20.10  # CoreDNS alternative
    # DNS ports
    ports:
      - port: 53
        protocol: UDP
      - port: 53
        protocol: TCP

  # Kubernetes API server access
  kubernetes:
    # Allow access to Kubernetes API server
    enabled: true
    # API server endpoints (usually cluster IP)
    endpoints:
      - kubernetes.default.svc.cluster.local
    # API server ports
    ports:
      - port: 443
        protocol: TCP

  # Additional egress rules (custom)
  # List of additional egress rules for specific use cases
  # Each rule should specify namespaceSelector, podSelector, and ports
  additionalRules: []

  # Example additional rules:
  # additionalRules:
  #   - to:
  #       - namespaceSelector:
  #           matchLabels:
  #             name: monitoring
  #       - podSelector:
  #           matchLabels:
  #             app: prometheus
  #     ports:
  #       - port: 9090
  #         protocol: TCP

# =============================================================================
# NOTES
# =============================================================================
#
# CRDs are delivered under crds/ in the chart and installed automatically
#
# For production deployments, consider:
# 1. Using digest pinning for images (see examples/values-image-pinning.yaml)
# 2. Enabling NetworkPolicies with moderate preset
# 3. Using minimal RBAC preset for single-namespace deployments
# 4. Implementing secret access restrictions for enhanced security
#
# See the examples/ directory for comprehensive configuration examples
