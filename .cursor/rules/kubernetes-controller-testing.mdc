---
globs: "tests/**/*.py,src/**/*.py"
description: "Testing patterns for Kubernetes controllers and CRDs."
---
# Kubernetes Controller Testing Patterns

## Repository CRD Testing
When testing Repository controller logic:

### Condition Management
- Test all validation failure scenarios (missing URL, auth secret, ConfigMap)
- Verify `AuthValid`, `CloneReady`, and `Ready` conditions are set correctly
- `Ready` should be derived from `AuthValid=True` AND `CloneReady=True`
- Test probe success/failure transitions

### Event Emission
- Test `ValidateSucceeded` events with concise success messages
- Test `ValidateFailed` events with specific error reasons
- Verify events are emitted for both reconciliation and job completion

### Mock Setup
- Mock Kopf patch objects with `status` and `meta` attributes
- Mock Kubernetes API calls (CoreV1Api, CustomObjectsApi)
- Configure meta mocks to return `None` for `deletionTimestamp` to avoid early returns
- Use `@patch` decorators for external dependencies

### Test Structure
```python
def test_scenario():
    # Setup mocks
    mock_patch = MockPatch()
    meta_mock = MagicMock()
    meta_mock.get.side_effect = lambda key, default=None: None if key == "deletionTimestamp" else MagicMock()

    # Call function under test
    reconcile_repository(spec=spec, status=status, patch=mock_patch, meta=meta_mock)

    # Assert conditions and events
    conditions = mock_patch.status.get("conditions", [])
    assert len(conditions) == expected_count
```

## Job Completion Testing
- Test successful probe: `AuthValid=True`, `CloneReady=True`, `Ready=True`
- Test failed probe: `AuthValid=False`, `CloneReady=False`, `Ready=False`
- Verify status updates via CustomObjectsApi.patch_namespaced_custom_object_status

## General Testing Guidelines
- Cover both success and failure paths
- Use descriptive test names
- Mock external dependencies thoroughly
- Verify event emission and condition management
- Ensure all code paths are tested
