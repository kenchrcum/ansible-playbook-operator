---
globs: "helm/**/*.yaml,**/*.py,architecture/**/*.md"
description: "Backward compatibility policy for CRD version bumps and schema evolution."
---
# Backward Compatibility Policy

## Versioning Strategy
- Follow Kubernetes API versioning: `v1alpha1` → `v1beta1` → `v1`
- Current version: `v1alpha1` (experimental)
- Version promotion requires 6+ months stability and community consensus
- See [architecture/backward-compatibility-policy.md](mdc:architecture/backward-compatibility-policy.md) for complete guidelines

## Schema Evolution Rules

### Allowed Changes (Non-Breaking)
- **Always allowed**: Adding new optional fields with defaults
- **Always allowed**: Adding new fields to `status` subresource
- **Always allowed**: Adding new printer columns
- **Always allowed**: Adding new enum values (append-only)
- **Allowed**: Making optional fields required (with default values)
- **Allowed**: Relaxing validation constraints
- **Allowed**: Adding new validation rules that don't reject existing valid data

### Prohibited Changes (Breaking)
- **Never allowed**: Removing any field from `spec` or `status`
- **Never allowed**: Removing enum values
- **Never allowed**: Changing field types (string → int, object → array, etc.)
- **Never allowed**: Making required fields optional
- **Never allowed**: Tightening validation constraints that reject existing data
- **Never allowed**: Changing field names

## Breaking Change Process
1. **Proposal Phase**: Create RFC with impact assessment and migration strategy
2. **Implementation Phase**: Implement new version with conversion webhooks
3. **Deprecation Phase**: 6-month notice, 3-month warning period
4. **Removal Phase**: Remove deprecated version after grace period

## Conversion Strategy
- Implement conversion webhooks for automatic migration between versions
- Provide migration tooling and documentation for complex changes
- Test all conversion paths with unit, integration, and E2E tests
- Monitor conversion success/failure with metrics and events

## CRD Implementation
- Store CRDs in `helm/ansible-playbook-operator/crds/` (no templating)
- Use structural schemas with validation and defaults
- Enable `status` subresource for all CRDs
- Add conversion webhook configuration when introducing new versions

## Testing Requirements
- **Conversion Testing**: Unit tests for all conversion functions
- **Migration Testing**: E2E tests for existing resource migration
- **Performance Testing**: Ensure conversion doesn't impact performance
- **Edge Cases**: Test migration of malformed or incomplete data

## Monitoring and Observability
- Metrics: `ansible_operator_conversion_total{from_version,to_version,result}`
- Events: `ConversionSucceeded`/`ConversionFailed`, `DeprecationWarning`
- Logs: Structured JSON with deprecation warnings and conversion attempts
- Audit: Log all conversion attempts for security and compliance

## Security Considerations
- Validate converted objects to prevent injection attacks
- Sanitize input data during conversion
- Ensure conversion webhook has proper RBAC
- Require backups before migration, provide rollback procedures
- Test migration in non-production environments first

## Documentation Requirements
- Migration guides with step-by-step instructions
- Before/after examples for each breaking change
- Troubleshooting guides for common migration issues
- Version compatibility matrix in project documentation
