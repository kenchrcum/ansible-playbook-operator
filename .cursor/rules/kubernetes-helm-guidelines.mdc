---
globs: "**/*.py,helm/**/*.yaml,examples/**/*.yaml"
description: "Guidelines for working with Kubernetes resources and Helm charts."
---
# Kubernetes and Helm Guidelines

## Kubernetes API Usage
- Use Server-Side Apply for all Kubernetes resource writes.
- The field manager must be `ansible-operator`.

## Security
- Default to minimal RBAC. Escalation is opt-in and explicit in Helm values.
- For executor pods, ensure the following security context is applied:
  - `runAsNonRoot: true`
  - `readOnlyRootFilesystem: true`
  - `seccompProfile: { type: 'RuntimeDefault' }`
  - Drop all capabilities (`drop: ["ALL"]`).
  - `allowPrivilegeEscalation: false`
- Pin container images by digest in released charts and CI.

## Helm
- CRDs are stored in `helm/ansible-playbook-operator/crds/` and should not be templated.
- Helm values should be split between `operator.*`, `executorDefaults.*`, and `rbac.*`.
- Provide example values for RBAC presets, namespace vs cluster-wide watch, and cache configuration.
- Include optional PVC templates for executor caching when `executorDefaults.cache.createPVC` is enabled.

## CRD Schema Validation
- CRD schemas must not define `metadata` properties beyond `name` and `generateName`
- Kubernetes implicitly handles metadata fields; defining them causes validation errors
- Use `kubectl apply --dry-run=client` to validate CRD schemas before committing
- Examples in `examples/` directory contain multi-document YAML and should be excluded from YAML linting

## RBAC Preset Implementation
- Implement RBAC presets using conditional Helm templating (`{{- if eq .Values.rbac.preset "preset-name" }}`)
- Structure presets with progressive permissions: `minimal` (default, least-privilege) → `scoped` (cross-namespace) → `cluster-admin` (full access)
- Use separate Role/ClusterRole templates with conditional logic rather than complex conditionals within single resources
- Document preset trade-offs in `values.yaml` comments and `NOTES.txt`
- Maintain backward compatibility by keeping existing boolean flags functional

## Backward Compatibility (CRDs)
- CRD changes must follow Kubernetes API versioning conventions.
- Add new fields, but do not remove or break existing ones.
- Create a new version (e.g., `v1beta1`) for breaking changes and provide a conversion webhook or migration documentation.
