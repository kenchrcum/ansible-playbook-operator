---
description: "Git workflow, branching, and commit conventions for the project."
---
# Git Workflow

## Branch Naming
- `feat/*`: New features
- `fix/*`: Bug fixes
- `docs/*`: Documentation changes
- `chore/*`: Build process, dependency updates, etc.
- `refactor/*`: Code refactoring without changing external behavior
- `test/*`: Adding or improving tests

## Commits
- Use [Conventional Commits](https://www.conventionalcommits.org/).
- Squash merge Pull Requests.
- Commits should be small and focused.
- Commit messages should be meaningful and emphasize the "why" of the change.
- The body of a PR description should also contain a short "why".

## Agent Commit Workflow
- **Always commit changes** when completing tasks or making meaningful progress
- Use descriptive commit messages that explain what was implemented
- Include relevant file changes in commit scope (e.g., `git add .` for comprehensive changes)
- Run pre-commit checks before committing: `source .venv/bin/activate && pre-commit run --all-files`
- Fix any pre-commit failures before committing
- Use conventional commit format: `type: description` (e.g., `feat:`, `fix:`, `docs:`, `test:`)
- Include detailed commit body when implementing significant features
- Reference completed TODO items in commit messages when appropriate
