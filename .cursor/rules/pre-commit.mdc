---
alwaysApply: true
description: "Always run pre-commit before committing; auto-fix common issues."
globs: "**/*"
---
# Pre-commit Enforcement Rule

Always run `pre-commit` checks locally before committing changes to ensure the repo stays committable and CI passes.

## Running Tests
Always run tests using the virtual environment:
```bash
git add .
source .venv/bin/activate
pre-commit run --all-files
```

## Required Local Workflow
- Activate virtual environment: `source .venv/bin/activate`
- Run `pre-commit run --all-files` before commit.
- If hooks fail, auto-fix with:
  - `ruff --fix .` and `ruff format .` (or rely on the hook to fix)
  - `black .` (if needed; ruff-format usually covers formatting)
  - Re-run `pre-commit run --all-files` until it passes.

## Typical Fixes Guided by Hooks
- Import sorting/formatting (I001): reorder imports; group stdlib, third-party, local; use `ruff check --fix` for auto-fix.
- Unused imports (F401): remove unused imports like `pytest` in test files.
- Type annotations: add proper type hints for variables, avoid `Any` in favor of specific types.
- Simplifications (SIM105): prefer `contextlib.suppress(Exception)` over `try/except/pass`.
- Mypy: remove unused `# type: ignore`, add precise typing, avoid `Any` in public APIs.
- YAML linting: `examples/` directory contains multi-document Kubernetes manifests and is excluded from YAML validation.

## Commit Gate
- Do not commit if `pre-commit` is failing. Fix locally first, then commit.
- **Always commit changes** after completing tasks or implementing features.
- Use conventional commit format: `type: description` (e.g., `feat:`, `fix:`, `docs:`, `test:`).
- Include detailed commit body for significant changes.

References:
- Project tools: ruff, ruff-format, black, mypy, codespell.
- See [python-guidelines.mdc](mdc:.cursor/rules/python-guidelines.mdc) and [documentation-and-testing.mdc](mdc:.cursor/rules/documentation-and-testing.mdc).
