# Cursor Rules â€” Repository-wide

These rules set expectations for coding, reviews, commits, and operational hygiene for the Ansible Playbook Operator project. They apply to all languages and tooling unless a subdirectory defines stricter rules.

## General Principles
- Prefer simplicity, determinism, and least privilege.
- Changes must be observable (events, metrics, logs) and reversible (feature flags or configuration switches).
- No secrets in logs, errors, CI output, or docs.

## Languages & Tooling
- Python 3.11; use `ruff` for linting, `black` for formatting, `mypy` for typing.
- Tests with `pytest`; prefer unit tests for logic and kind-based integration tests for controllers.
- Use Server-Side Apply for Kubernetes writes; one field manager: `ansible-operator`.

## Code Style (Python)
- Strict typing at public boundaries; avoid `Any` in public APIs.
- Use descriptive names; avoid abbreviations; prefer clarity over brevity.
- Guard clauses over deep nesting; explicit error handling; never swallow exceptions.
- Keep functions small and focused; extract pure functions for testability.

## Project Structure
- `src/` contains controller entrypoints and services (`controllers/`, `services/git/`, `services/ansible/`, `k8s/resources/`).
- `schemas/` for CRDs and JSON schemas; not templated in Helm.
- `helm/` for the chart: CRDs under `crds/`, manifests under `templates/`.
- `tests/` split into `unit/` and `integration/`.
- `examples/` with minimal, secure-by-default manifests.

## Security
- Default to minimal RBAC. Escalation is opt-in and explicit in Helm values.
- Executor pods: `runAsNonRoot`, `readOnlyRootFilesystem`, `seccompProfile: RuntimeDefault`, drop capabilities, no privilege escalation.
- Pin images by digest in released charts and CI.

## Observability
- Emit Kubernetes Events on meaningful state changes.
- Expose Prometheus metrics for reconciles, queue, and job results. Provide a Service and optional ServiceMonitor.
- Structured JSON logs; include correlation ids (CR UID + run id). Do not log secrets.

## Git Workflow
- Branch naming: `feat/*`, `fix/*`, `docs/*`, `chore/*`, `refactor/*`, `test/*`.
- Conventional Commits; squash merge via PRs.
- Every PR updates tests/docs as needed and includes a short "why" in the description.

## Reviews & Quality Gates
- CI must pass: lint, type-check, unit tests, integration smoke (kind), chart lint.
- New features must include metrics/events and status conditions.
- Reject PRs that introduce secret leakage or reduce security defaults.

## Helm
- CRDs stored in `helm/<chart-name>/crds/`; no templating of schema.
- Values split between `operator.*`, `executorDefaults.*`, `rbac.*`.
- Provide example values for RBAC presets and multi-namespace watch.

## Backward Compatibility
- CRD changes follow k8s versioning: add fields; do not break; create `v1beta1` when necessary.
- Provide conversion or migration docs on breaking changes.

## Documentation
- Keep `architecture/development-plan.md` as living design doc; update before implementation changes.
- Examples must be runnable in kind/minikube and follow security defaults.

## Commit Hygiene
- No commented-out code. No TODOs left; implement or create an issue.
- Small, focused commits; meaningful messages emphasizing "why".
